# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "appointment(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "request(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "response(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "registration(string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "certification(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "temperature(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "checkin(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "confirmation(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "analysis(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "report(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "execute()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 10,
            "num_uints": 33
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "e0": {
                    "type": "uint64",
                    "key": "e0",
                    "descr": ""
                },
                "e1": {
                    "type": "uint64",
                    "key": "e1",
                    "descr": ""
                },
                "e10": {
                    "type": "uint64",
                    "key": "e10",
                    "descr": ""
                },
                "e11": {
                    "type": "uint64",
                    "key": "e11",
                    "descr": ""
                },
                "e12": {
                    "type": "uint64",
                    "key": "e12",
                    "descr": ""
                },
                "e13": {
                    "type": "uint64",
                    "key": "e13",
                    "descr": ""
                },
                "e14": {
                    "type": "uint64",
                    "key": "e14",
                    "descr": ""
                },
                "e15": {
                    "type": "uint64",
                    "key": "e15",
                    "descr": ""
                },
                "e16": {
                    "type": "uint64",
                    "key": "e16",
                    "descr": ""
                },
                "e17": {
                    "type": "uint64",
                    "key": "e17",
                    "descr": ""
                },
                "e18": {
                    "type": "uint64",
                    "key": "e18",
                    "descr": ""
                },
                "e19": {
                    "type": "uint64",
                    "key": "e19",
                    "descr": ""
                },
                "e2": {
                    "type": "uint64",
                    "key": "e2",
                    "descr": ""
                },
                "e3": {
                    "type": "uint64",
                    "key": "e3",
                    "descr": ""
                },
                "e4": {
                    "type": "uint64",
                    "key": "e4",
                    "descr": ""
                },
                "e5": {
                    "type": "uint64",
                    "key": "e5",
                    "descr": ""
                },
                "e6": {
                    "type": "uint64",
                    "key": "e6",
                    "descr": ""
                },
                "e7": {
                    "type": "uint64",
                    "key": "e7",
                    "descr": ""
                },
                "e8": {
                    "type": "uint64",
                    "key": "e8",
                    "descr": ""
                },
                "e9": {
                    "type": "uint64",
                    "key": "e9",
                    "descr": ""
                },
                "enabled_messages": {
                    "type": "uint64",
                    "key": "enabled_messages",
                    "descr": ""
                },
                "payload_analysis": {
                    "type": "bytes",
                    "key": "payload_analysis",
                    "descr": ""
                },
                "payload_appointment": {
                    "type": "bytes",
                    "key": "payload_appointment",
                    "descr": ""
                },
                "payload_certification": {
                    "type": "bytes",
                    "key": "payload_certification",
                    "descr": ""
                },
                "payload_checkin": {
                    "type": "bytes",
                    "key": "payload_checkin",
                    "descr": ""
                },
                "payload_confirmation": {
                    "type": "uint64",
                    "key": "payload_confirmation",
                    "descr": ""
                },
                "payload_registration_appointmentId": {
                    "type": "bytes",
                    "key": "payload_registration_appointmentId",
                    "descr": ""
                },
                "payload_registration_date": {
                    "type": "bytes",
                    "key": "payload_registration_date",
                    "descr": ""
                },
                "payload_report": {
                    "type": "bytes",
                    "key": "payload_report",
                    "descr": ""
                },
                "payload_request": {
                    "type": "bytes",
                    "key": "payload_request",
                    "descr": ""
                },
                "payload_response_accepted": {
                    "type": "uint64",
                    "key": "payload_response_accepted",
                    "descr": ""
                },
                "payload_response_date": {
                    "type": "bytes",
                    "key": "payload_response_date",
                    "descr": ""
                },
                "payload_temperature": {
                    "type": "bytes",
                    "key": "payload_temperature",
                    "descr": ""
                },
                "status_analysis": {
                    "type": "uint64",
                    "key": "status_analysis",
                    "descr": ""
                },
                "status_appointment": {
                    "type": "uint64",
                    "key": "status_appointment",
                    "descr": ""
                },
                "status_certification": {
                    "type": "uint64",
                    "key": "status_certification",
                    "descr": ""
                },
                "status_checkin": {
                    "type": "uint64",
                    "key": "status_checkin",
                    "descr": ""
                },
                "status_confirmation": {
                    "type": "uint64",
                    "key": "status_confirmation",
                    "descr": ""
                },
                "status_registration": {
                    "type": "uint64",
                    "key": "status_registration",
                    "descr": ""
                },
                "status_report": {
                    "type": "uint64",
                    "key": "status_report",
                    "descr": ""
                },
                "status_request": {
                    "type": "uint64",
                    "key": "status_request",
                    "descr": ""
                },
                "status_response": {
                    "type": "uint64",
                    "key": "status_response",
                    "descr": ""
                },
                "status_temperature": {
                    "type": "uint64",
                    "key": "status_temperature",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "XRayChoreography",
        "methods": [
            {
                "name": "appointment",
                "args": [
                    {
                        "type": "string",
                        "name": "payload"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "request",
                "args": [
                    {
                        "type": "string",
                        "name": "payload"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "response",
                "args": [
                    {
                        "type": "uint64",
                        "name": "payload"
                    },
                    {
                        "type": "string",
                        "name": "payload1"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "registration",
                "args": [
                    {
                        "type": "string",
                        "name": "payload"
                    },
                    {
                        "type": "string",
                        "name": "payload1"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "certification",
                "args": [
                    {
                        "type": "string",
                        "name": "payload"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "temperature",
                "args": [
                    {
                        "type": "string",
                        "name": "payload"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "checkin",
                "args": [
                    {
                        "type": "string",
                        "name": "payload"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "confirmation",
                "args": [
                    {
                        "type": "uint64",
                        "name": "payload"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "analysis",
                "args": [
                    {
                        "type": "string",
                        "name": "payload"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "report",
                "args": [
                    {
                        "type": "string",
                        "name": "payload"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "execute",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class AppointmentArgs(_ArgsBase[None]):
    payload: str

    @staticmethod
    def method() -> str:
        return "appointment(string)void"


@dataclasses.dataclass(kw_only=True)
class RequestArgs(_ArgsBase[None]):
    payload: str

    @staticmethod
    def method() -> str:
        return "request(string)void"


@dataclasses.dataclass(kw_only=True)
class ResponseArgs(_ArgsBase[None]):
    payload: int
    payload1: str

    @staticmethod
    def method() -> str:
        return "response(uint64,string)void"


@dataclasses.dataclass(kw_only=True)
class RegistrationArgs(_ArgsBase[None]):
    payload: str
    payload1: str

    @staticmethod
    def method() -> str:
        return "registration(string,string)void"


@dataclasses.dataclass(kw_only=True)
class CertificationArgs(_ArgsBase[None]):
    payload: str

    @staticmethod
    def method() -> str:
        return "certification(string)void"


@dataclasses.dataclass(kw_only=True)
class TemperatureArgs(_ArgsBase[None]):
    payload: str

    @staticmethod
    def method() -> str:
        return "temperature(string)void"


@dataclasses.dataclass(kw_only=True)
class CheckinArgs(_ArgsBase[None]):
    payload: str

    @staticmethod
    def method() -> str:
        return "checkin(string)void"


@dataclasses.dataclass(kw_only=True)
class ConfirmationArgs(_ArgsBase[None]):
    payload: int

    @staticmethod
    def method() -> str:
        return "confirmation(uint64)void"


@dataclasses.dataclass(kw_only=True)
class AnalysisArgs(_ArgsBase[None]):
    payload: str

    @staticmethod
    def method() -> str:
        return "analysis(string)void"


@dataclasses.dataclass(kw_only=True)
class ReportArgs(_ArgsBase[None]):
    payload: str

    @staticmethod
    def method() -> str:
        return "report(string)void"


@dataclasses.dataclass(kw_only=True)
class ExecuteArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "execute()void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.e0 = typing.cast(int, data.get(b"e0"))
        self.e1 = typing.cast(int, data.get(b"e1"))
        self.e10 = typing.cast(int, data.get(b"e10"))
        self.e11 = typing.cast(int, data.get(b"e11"))
        self.e12 = typing.cast(int, data.get(b"e12"))
        self.e13 = typing.cast(int, data.get(b"e13"))
        self.e14 = typing.cast(int, data.get(b"e14"))
        self.e15 = typing.cast(int, data.get(b"e15"))
        self.e16 = typing.cast(int, data.get(b"e16"))
        self.e17 = typing.cast(int, data.get(b"e17"))
        self.e18 = typing.cast(int, data.get(b"e18"))
        self.e19 = typing.cast(int, data.get(b"e19"))
        self.e2 = typing.cast(int, data.get(b"e2"))
        self.e3 = typing.cast(int, data.get(b"e3"))
        self.e4 = typing.cast(int, data.get(b"e4"))
        self.e5 = typing.cast(int, data.get(b"e5"))
        self.e6 = typing.cast(int, data.get(b"e6"))
        self.e7 = typing.cast(int, data.get(b"e7"))
        self.e8 = typing.cast(int, data.get(b"e8"))
        self.e9 = typing.cast(int, data.get(b"e9"))
        self.enabled_messages = typing.cast(int, data.get(b"enabled_messages"))
        self.payload_analysis = ByteReader(typing.cast(bytes, data.get(b"payload_analysis")))
        self.payload_appointment = ByteReader(typing.cast(bytes, data.get(b"payload_appointment")))
        self.payload_certification = ByteReader(typing.cast(bytes, data.get(b"payload_certification")))
        self.payload_checkin = ByteReader(typing.cast(bytes, data.get(b"payload_checkin")))
        self.payload_confirmation = typing.cast(int, data.get(b"payload_confirmation"))
        self.payload_registration_appointmentId = ByteReader(typing.cast(bytes, data.get(b"payload_registration_appointmentId")))
        self.payload_registration_date = ByteReader(typing.cast(bytes, data.get(b"payload_registration_date")))
        self.payload_report = ByteReader(typing.cast(bytes, data.get(b"payload_report")))
        self.payload_request = ByteReader(typing.cast(bytes, data.get(b"payload_request")))
        self.payload_response_accepted = typing.cast(int, data.get(b"payload_response_accepted"))
        self.payload_response_date = ByteReader(typing.cast(bytes, data.get(b"payload_response_date")))
        self.payload_temperature = ByteReader(typing.cast(bytes, data.get(b"payload_temperature")))
        self.status_analysis = typing.cast(int, data.get(b"status_analysis"))
        self.status_appointment = typing.cast(int, data.get(b"status_appointment"))
        self.status_certification = typing.cast(int, data.get(b"status_certification"))
        self.status_checkin = typing.cast(int, data.get(b"status_checkin"))
        self.status_confirmation = typing.cast(int, data.get(b"status_confirmation"))
        self.status_registration = typing.cast(int, data.get(b"status_registration"))
        self.status_report = typing.cast(int, data.get(b"status_report"))
        self.status_request = typing.cast(int, data.get(b"status_request"))
        self.status_response = typing.cast(int, data.get(b"status_response"))
        self.status_temperature = typing.cast(int, data.get(b"status_temperature"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def appointment(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `appointment(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AppointmentArgs(
            payload=payload,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def request(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `request(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RequestArgs(
            payload=payload,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def response(
        self,
        *,
        payload: int,
        payload1: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `response(uint64,string)void` ABI method
        
        :param int payload: The `payload` ABI parameter
        :param str payload1: The `payload1` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ResponseArgs(
            payload=payload,
            payload1=payload1,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def registration(
        self,
        *,
        payload: str,
        payload1: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `registration(string,string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param str payload1: The `payload1` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RegistrationArgs(
            payload=payload,
            payload1=payload1,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def certification(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `certification(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CertificationArgs(
            payload=payload,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def temperature(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `temperature(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = TemperatureArgs(
            payload=payload,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def checkin(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `checkin(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CheckinArgs(
            payload=payload,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def confirmation(
        self,
        *,
        payload: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `confirmation(uint64)void` ABI method
        
        :param int payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ConfirmationArgs(
            payload=payload,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def analysis(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `analysis(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AnalysisArgs(
            payload=payload,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def report(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `report(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ReportArgs(
            payload=payload,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def execute(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `execute()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ExecuteArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class XRayChoreographyClient:
    """A class for interacting with the XRayChoreography app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        XRayChoreographyClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def appointment(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `appointment(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AppointmentArgs(
            payload=payload,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def request(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `request(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = RequestArgs(
            payload=payload,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def response(
        self,
        *,
        payload: int,
        payload1: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `response(uint64,string)void` ABI method
        
        :param int payload: The `payload` ABI parameter
        :param str payload1: The `payload1` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ResponseArgs(
            payload=payload,
            payload1=payload1,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def registration(
        self,
        *,
        payload: str,
        payload1: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `registration(string,string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param str payload1: The `payload1` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = RegistrationArgs(
            payload=payload,
            payload1=payload1,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def certification(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `certification(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CertificationArgs(
            payload=payload,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def temperature(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `temperature(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = TemperatureArgs(
            payload=payload,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def checkin(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `checkin(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CheckinArgs(
            payload=payload,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def confirmation(
        self,
        *,
        payload: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `confirmation(uint64)void` ABI method
        
        :param int payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ConfirmationArgs(
            payload=payload,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def analysis(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `analysis(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AnalysisArgs(
            payload=payload,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def report(
        self,
        *,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `report(string)void` ABI method
        
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ReportArgs(
            payload=payload,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def execute(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `execute()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ExecuteArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
