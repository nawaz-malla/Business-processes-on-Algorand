# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "start1()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "task1()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "end1()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "m1(address,address,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "store_intermediate_states()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "execute()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQpieXRlY2Jsb2NrIDB4NjUzMiAweDY1MzMgMHg2NTMxIDB4NmQzMTVmNzM3NDYxNzQ3NTczIDB4NmQzMTVmNzA2MTc5NmM2ZjYxNjQgMHgKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDE0CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4ODBkMDZjOTkgLy8gInN0YXJ0MSgpdm9pZCIKPT0KYm56IG1haW5fbDEzCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4ZDMwOWUyM2MgLy8gInRhc2sxKCl2b2lkIgo9PQpibnogbWFpbl9sMTIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg4MmMyMWQ5ZiAvLyAiZW5kMSgpdm9pZCIKPT0KYm56IG1haW5fbDExCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MDY1YzU5N2IgLy8gIm0xKGFkZHJlc3MsYWRkcmVzcyxzdHJpbmcpdm9pZCIKPT0KYm56IG1haW5fbDEwCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4NjUyOWFjMjQgLy8gInN0b3JlX2ludGVybWVkaWF0ZV9zdGF0ZXMoKXZvaWQiCj09CmJueiBtYWluX2w5CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4Y2MwNDc4MzcgLy8gImV4ZWN1dGUoKXZvaWQiCj09CmJueiBtYWluX2w4CmVycgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGV4ZWN1dGVjYXN0ZXJfMTIKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDk6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgc3RvcmVpbnRlcm1lZGlhdGVzdGF0ZXNjYXN0ZXJfMTEKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEwOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIG0xY2FzdGVyXzEwCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBlbmQxY2FzdGVyXzkKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEyOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHRhc2sxY2FzdGVyXzgKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEzOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHN0YXJ0MWNhc3Rlcl83CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxNDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sMTYKZXJyCm1haW5fbDE2Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGNyZWF0ZQpjcmVhdGVfMDoKcHJvdG8gMCAwCmJ5dGVjXzIgLy8gImUxIgppbnRjXzEgLy8gMQphcHBfZ2xvYmFsX3B1dApieXRlY18wIC8vICJlMiIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAiZTMiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDQgLy8gIm0xX3BheWxvYWQiCmJ5dGVjIDUgLy8gIiIKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMyAvLyAibTFfc3RhdHVzIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHN0YXJ0MQpzdGFydDFfMToKcHJvdG8gMCAwCmJ5dGVjXzIgLy8gImUxIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMAo+CmJ6IHN0YXJ0MV8xX2wyCmJ5dGVjXzIgLy8gImUxIgpieXRlY18yIC8vICJlMSIKYXBwX2dsb2JhbF9nZXQKaW50Y18xIC8vIDEKLQphcHBfZ2xvYmFsX3B1dApieXRlY18wIC8vICJlMiIKYnl0ZWNfMCAvLyAiZTIiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCisKYXBwX2dsb2JhbF9wdXQKY2FsbHN1YiBzdG9yZWludGVybWVkaWF0ZXN0YXRlc181CnB1c2hieXRlcyAweDQ1Nzg2NTYzNzU3NDY5NmY2ZTIwNmY2NjIwNzM3NDYxNzI3NDMxIC8vICJFeGVjdXRpb24gb2Ygc3RhcnQxIgpsb2cKc3RhcnQxXzFfbDI6CmludGNfMSAvLyAxCnJldHVybgoKLy8gdGFzazEKdGFzazFfMjoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gImUyIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMAo+CmJ6IHRhc2sxXzJfbDIKYnl0ZWNfMCAvLyAiZTIiCmJ5dGVjXzAgLy8gImUyIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQotCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gIm0xX3N0YXR1cyIKaW50Y18xIC8vIDEKYXBwX2dsb2JhbF9wdXQKY2FsbHN1YiBzdG9yZWludGVybWVkaWF0ZXN0YXRlc181CnB1c2hieXRlcyAweDQ1Nzg2NTYzNzU3NDY5NmY2ZTIwNmY2NjIwNzQ2MTczNmIzMSAvLyAiRXhlY3V0aW9uIG9mIHRhc2sxIgpsb2cKdGFzazFfMl9sMjoKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBlbmQxCmVuZDFfMzoKcHJvdG8gMCAwCmJ5dGVjXzEgLy8gImUzIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMAo+CmJ6IGVuZDFfM19sMgpieXRlY18xIC8vICJlMyIKYnl0ZWNfMSAvLyAiZTMiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCi0KYXBwX2dsb2JhbF9wdXQKY2FsbHN1YiBzdG9yZWludGVybWVkaWF0ZXN0YXRlc181CnB1c2hieXRlcyAweDQ1Nzg2NTYzNzU3NDY5NmY2ZTIwNmY2NjIwNjU2ZTY0MzEgLy8gIkV4ZWN1dGlvbiBvZiBlbmQxIgpsb2cKZW5kMV8zX2wyOgppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIG0xCm0xXzQ6CnByb3RvIDMgMApieXRlY18zIC8vICJtMV9zdGF0dXMiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCj09CmFzc2VydAp0eG4gU2VuZGVyCmZyYW1lX2RpZyAtMwo9PQphc3NlcnQKYnl0ZWMgNCAvLyAibTFfcGF5bG9hZCIKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gIm0xX3N0YXR1cyIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAiZTMiCmJ5dGVjXzEgLy8gImUzIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQorCmFwcF9nbG9iYWxfcHV0CmNhbGxzdWIgc3RvcmVpbnRlcm1lZGlhdGVzdGF0ZXNfNQpwdXNoYnl0ZXMgMHg0ZDY1NzM3MzYxNjc2NTIwNmQzMTIwNzM2NTZlNzQgLy8gIk1lc3NhZ2UgbTEgc2VudCIKbG9nCmludGNfMSAvLyAxCnJldHVybgoKLy8gc3RvcmVfaW50ZXJtZWRpYXRlX3N0YXRlcwpzdG9yZWludGVybWVkaWF0ZXN0YXRlc181Ogpwcm90byAwIDAKcHVzaGJ5dGVzIDB4NjUzMTVmNzM3NDYxNzQ2NSAvLyAiZTFfc3RhdGUiCmJ5dGVjXzIgLy8gImUxIgphcHBfZ2xvYmFsX2dldAphcHBfZ2xvYmFsX3B1dApwdXNoYnl0ZXMgMHg2NTMyNWY3Mzc0NjE3NDY1IC8vICJlMl9zdGF0ZSIKYnl0ZWNfMCAvLyAiZTIiCmFwcF9nbG9iYWxfZ2V0CmFwcF9nbG9iYWxfcHV0CnB1c2hieXRlcyAweDY1MzM1ZjczNzQ2MTc0NjUgLy8gImUzX3N0YXRlIgpieXRlY18xIC8vICJlMyIKYXBwX2dsb2JhbF9nZXQKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNCAvLyAibTFfcGF5bG9hZCIKYnl0ZWMgNCAvLyAibTFfcGF5bG9hZCIKYXBwX2dsb2JhbF9nZXQKYXBwX2dsb2JhbF9wdXQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBleGVjdXRlCmV4ZWN1dGVfNjoKcHJvdG8gMCAwCmNhbGxzdWIgc3RhcnQxXzEKYnl0ZWNfMCAvLyAiZTIiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCj4KYm56IGV4ZWN1dGVfNl9sNQpleGVjdXRlXzZfbDE6CmJ5dGVjXzMgLy8gIm0xX3N0YXR1cyIKYXBwX2dsb2JhbF9nZXQKaW50Y18xIC8vIDEKPT0KYm56IGV4ZWN1dGVfNl9sNApieXRlY18xIC8vICJlMyIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDAKPgpieiBleGVjdXRlXzZfbDYKY2FsbHN1YiBlbmQxXzMKYiBleGVjdXRlXzZfbDYKZXhlY3V0ZV82X2w0OgpwdXNoYnl0ZXMgMHgyYTJhMmEyMDQ1Nzg2NTYzNzU3NDY5NmY2ZTIwNzM3NTczNzA2NTZlNjQ2NTY0MmMyMDc3NjE2OTc0Njk2ZTY3MjA2NjZmNzIyMDZkNjU3MzczNjE2NzY1MjA2ZDMxMjAyYTJhMmEgLy8gIioqKiBFeGVjdXRpb24gc3VzcGVuZGVkLCB3YWl0aW5nIGZvciBtZXNzYWdlIG0xICoqKiIKbG9nCmludGNfMCAvLyAwCnJldHVybgpleGVjdXRlXzZfbDU6CmNhbGxzdWIgdGFzazFfMgpiIGV4ZWN1dGVfNl9sMQpleGVjdXRlXzZfbDY6CnB1c2hieXRlcyAweDJhMmEyYTJhMmEyMDQ1NGU0NDIwNmY2NjIwNzQ2ODY1MjA2MzY4NmY3MjY1NmY2NzcyNjE3MDY4NzkyMDY5NmU3Mzc0NjE2ZTYzNjUyMDJhMmEyYTJhMmEgLy8gIioqKioqIEVORCBvZiB0aGUgY2hvcmVvZ3JhcGh5IGluc3RhbmNlICoqKioqIgpsb2cKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBzdGFydDFfY2FzdGVyCnN0YXJ0MWNhc3Rlcl83Ogpwcm90byAwIDAKY2FsbHN1YiBzdGFydDFfMQpyZXRzdWIKCi8vIHRhc2sxX2Nhc3Rlcgp0YXNrMWNhc3Rlcl84Ogpwcm90byAwIDAKY2FsbHN1YiB0YXNrMV8yCnJldHN1YgoKLy8gZW5kMV9jYXN0ZXIKZW5kMWNhc3Rlcl85Ogpwcm90byAwIDAKY2FsbHN1YiBlbmQxXzMKcmV0c3ViCgovLyBtMV9jYXN0ZXIKbTFjYXN0ZXJfMTA6CnByb3RvIDAgMApieXRlYyA1IC8vICIiCmR1cG4gMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIG0xXzQKcmV0c3ViCgovLyBzdG9yZV9pbnRlcm1lZGlhdGVfc3RhdGVzX2Nhc3RlcgpzdG9yZWludGVybWVkaWF0ZXN0YXRlc2Nhc3Rlcl8xMToKcHJvdG8gMCAwCmNhbGxzdWIgc3RvcmVpbnRlcm1lZGlhdGVzdGF0ZXNfNQpyZXRzdWIKCi8vIGV4ZWN1dGVfY2FzdGVyCmV4ZWN1dGVjYXN0ZXJfMTI6CnByb3RvIDAgMApjYWxsc3ViIGV4ZWN1dGVfNgpyZXRzdWI=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "e1": {
                    "type": "uint64",
                    "key": "e1",
                    "descr": "Token on edge e1"
                },
                "e2": {
                    "type": "uint64",
                    "key": "e2",
                    "descr": "Token on edge e2"
                },
                "e3": {
                    "type": "uint64",
                    "key": "e3",
                    "descr": "Token on edge e3"
                },
                "m1_payload": {
                    "type": "bytes",
                    "key": "m1_payload",
                    "descr": "Payload of message m1"
                },
                "m1_status": {
                    "type": "uint64",
                    "key": "m1_status",
                    "descr": "Status of message m1 (enabled/disabled)"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ChoreographyContract",
        "methods": [
            {
                "name": "start1",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "task1",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "end1",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "m1",
                "args": [
                    {
                        "type": "address",
                        "name": "sender"
                    },
                    {
                        "type": "address",
                        "name": "receiver"
                    },
                    {
                        "type": "string",
                        "name": "payload"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "store_intermediate_states",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "execute",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class Start1Args(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "start1()void"


@dataclasses.dataclass(kw_only=True)
class Task1Args(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "task1()void"


@dataclasses.dataclass(kw_only=True)
class End1Args(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "end1()void"


@dataclasses.dataclass(kw_only=True)
class M1Args(_ArgsBase[None]):
    sender: str
    receiver: str
    payload: str

    @staticmethod
    def method() -> str:
        return "m1(address,address,string)void"


@dataclasses.dataclass(kw_only=True)
class StoreIntermediateStatesArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "store_intermediate_states()void"


@dataclasses.dataclass(kw_only=True)
class ExecuteArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "execute()void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.e1 = typing.cast(int, data.get(b"e1"))
        """Token on edge e1"""
        self.e2 = typing.cast(int, data.get(b"e2"))
        """Token on edge e2"""
        self.e3 = typing.cast(int, data.get(b"e3"))
        """Token on edge e3"""
        self.m1_payload = ByteReader(typing.cast(bytes, data.get(b"m1_payload")))
        """Payload of message m1"""
        self.m1_status = typing.cast(int, data.get(b"m1_status"))
        """Status of message m1 (enabled/disabled)"""


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def start1(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `start1()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = Start1Args()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def task1(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `task1()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = Task1Args()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def end1(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `end1()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = End1Args()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def m1(
        self,
        *,
        sender: str,
        receiver: str,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `m1(address,address,string)void` ABI method
        
        :param str sender: The `sender` ABI parameter
        :param str receiver: The `receiver` ABI parameter
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = M1Args(
            sender=sender,
            receiver=receiver,
            payload=payload,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def store_intermediate_states(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `store_intermediate_states()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = StoreIntermediateStatesArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def execute(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `execute()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ExecuteArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class ChoreographyContractClient:
    """A class for interacting with the ChoreographyContract app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        ChoreographyContractClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def start1(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `start1()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = Start1Args()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def task1(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `task1()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = Task1Args()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def end1(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `end1()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = End1Args()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def m1(
        self,
        *,
        sender: str,
        receiver: str,
        payload: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `m1(address,address,string)void` ABI method
        
        :param str sender: The `sender` ABI parameter
        :param str receiver: The `receiver` ABI parameter
        :param str payload: The `payload` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = M1Args(
            sender=sender,
            receiver=receiver,
            payload=payload,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def store_intermediate_states(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `store_intermediate_states()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = StoreIntermediateStatesArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def execute(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `execute()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ExecuteArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
